// 格雷编码
//n 位格雷码序列 是一个由 2ⁿ 个整数组成的序列，其中：
//
//
// 每个整数都在范围 [0, 2ⁿ - 1] 内（含 0 和 2ⁿ - 1）
// 第一个整数是 0
// 一个整数在序列中出现 不超过一次
// 每对 相邻 整数的二进制表示 恰好一位不同 ，且
// 第一个 和 最后一个 整数的二进制表示 恰好一位不同
//
//
// 给你一个整数 n ，返回任一有效的 n 位格雷码序列 。
//
//
//
// 示例 1：
//
//
//输入：n = 2
//输出：[0,1,3,2]
//解释：                  [1, 0, 1]
//[0,1,3,2] 的二进制表示是 [00,01,11,10] 。
// 00   10/01  00
//- 00 和 01 有一位不同
//- 01 和 11 有一位不同
//- 11 和 10 有一位不同
//- 10 和 00 有一位不同
//[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
//- 00 和 10 有一位不同
//- 10 和 11 有一位不同
//- 11 和 01 有一位不同
//- 01 和 00 有一位不同
//
//
// 示例 2：
//
//
//输入：n = 1
//输出：[0,1]
//
//输入：n = 3 [0,1,2,3,4,5,6,7]
// [7,6,5,4,3,2,1,0]
//输出：[0,1,3,2]
//解释：
// 1   2   3   4   5   6   7   8
//[0,  1,  3,  2,  4,  6,  7,  5]
//[000,001,011,010,100,110,111,101]
// [0,  1,  3,  2,  6,  4,  5,  7]
//[000,001,011,010,110,100,101,111]
// [0,  1,  3,  2,  6,  7,  5,  4]
//[000,001,011,010,110,111,101,100]
//  8      16   20     22     24
// [01000,10000,10100，10110，11000]
//
// 提示：
//
//
// 1 <= n <= 16
//
//
// Related Topics 位运算 数学 回溯 👍 546 👎 0
// 格雷编码
//n 位格雷码序列 是一个由 2ⁿ 个整数组成的序列，其中：
//
//
// 每个整数都在范围 [0, 2ⁿ - 1] 内（含 0 和 2ⁿ - 1）
// 第一个整数是 0
// 一个整数在序列中出现 不超过一次
// 每对 相邻 整数的二进制表示 恰好一位不同 ，且
// 第一个 和 最后一个 整数的二进制表示 恰好一位不同
//
//
// 给你一个整数 n ，返回任一有效的 n 位格雷码序列 。
//
//
//
// 示例 1：
//
//
//输入：n = 2
//输出：[0,1,3,2]
//解释：
//[0,1,3,2] 的二进制表示是 [00,01,11,10] 。
//- 00 和 01 有一位不同
//- 01 和 11 有一位不同
//- 11 和 10 有一位不同
//- 10 和 00 有一位不同
//[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
//- 00 和 10 有一位不同
//- 10 和 11 有一位不同
//- 11 和 01 有一位不同
//- 01 和 00 有一位不同
//
//
// 示例 2：
//
//
//输入：n = 1
//输出：[0,1]
//
//
//
//
// 提示：
//
//
// 1 <= n <= 16
//
//
// Related Topics 位运算 数学 回溯 👍 546 👎 0

//leetcode submit region begin(Prohibit modification and deletion)
function grayCode(n: number): number[] {
  const ret = [];
  for (let i = 0; i < 1 << n; i++) {
    ret.push((i >> 1) ^ i);
  }
  return ret;
}
// console.log(grayCode(5));

function xor(nums: number[]) {
  for (let i = 0; i < nums.length - 1; i++) {
    console.log(nums[i] ^ nums[i + 1]);
  }
}
// xor([0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8]);
// console.log(new Array(3).fill(1).map((_, idx) => Math.pow(2, idx)));
//leetcode submit region end(Prohibit modification and deletion)
